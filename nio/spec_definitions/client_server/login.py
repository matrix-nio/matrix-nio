# generated by datamodel-codegen:
#   filename:  login.yaml
#   timestamp: 2024-06-02T09:07:49+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, ConfigDict, Field

from .wellknown import Discovery


class LoginResponse(BaseModel):
    model_config = ConfigDict(extra="ignore")

    user_id: str = Field(
        ..., description="The fully-qualified Matrix ID for the account."
    )
    access_token: str = Field(
        ...,
        description="An access token for the account.\nThis access token can then be used to authorize other requests.",
    )
    refresh_token: Optional[str] = Field(
        None,
        description="A refresh token for the account. This token can be used to\nobtain a new access token when it expires by calling the\n`/refresh` endpoint.",
    )
    expires_in_ms: Optional[int] = Field(
        None,
        description="The lifetime of the access token, in milliseconds. Once\nthe access token has expired a new access token can be\nobtained by using the provided refresh token. If no\nrefresh token is provided, the client will need to re-log in\nto obtain a new access token. If not given, the client can\nassume that the access token will not expire.",
    )
    device_id: str = Field(
        ...,
        description="ID of the logged-in device. Will be the same as the\ncorresponding parameter in the request, if one was specified.",
    )
    well_known: Optional[Discovery] = Field(
        None,
        description="Optional client configuration provided by the server. If present,\nclients SHOULD use the provided object to reconfigure themselves,\noptionally validating the URLs within. This object takes the same\nform as the one returned from .well-known autodiscovery.",
    )
