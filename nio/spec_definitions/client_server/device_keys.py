# generated by datamodel-codegen:
#   filename:  device_keys.yaml
#   timestamp: 2024-06-01T22:41:29+00:00

from __future__ import annotations

from typing import Dict, List

from pydantic import BaseModel, Field, constr


class DeviceKeys(BaseModel):
    user_id: str = Field(
        ...,
        description="The ID of the user the device belongs to. Must match the user ID used\nwhen logging in.",
        examples=["@alice:example.com"],
    )
    device_id: str = Field(
        ...,
        description="The ID of the device these keys belong to. Must match the device ID used\nwhen logging in.",
        examples=["JLAFKJWSCS"],
    )
    algorithms: List[str] = Field(
        ...,
        description="The encryption algorithms supported by this device.",
        examples=[["m.olm.v1.curve25519-aes-sha2", "m.megolm.v1.aes-sha2"]],
    )
    keys: Dict[str, str] = Field(
        ...,
        description="Public identity keys. The names of the properties should be in the\nformat `<algorithm>:<device_id>`. The keys themselves should be\nencoded as specified by the key algorithm.",
        examples=[
            {
                "curve25519:JLAFKJWSCS": "3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI",
                "ed25519:JLAFKJWSCS": "lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI",
            }
        ],
    )
    signatures: Dict[constr(pattern=r"^@"), Dict[str, str]] = Field(
        ...,
        description="Signatures for the device key object. A map from user ID, to a map from\n`<algorithm>:<device_id>` to the signature.\n\nThe signature is calculated using the process described at [Signing JSON](/appendices/#signing-json).",
        examples=[
            {
                "@alice:example.com": {
                    "ed25519:JLAFKJWSCS": "dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA"
                }
            }
        ],
        title="Signatures",
    )
