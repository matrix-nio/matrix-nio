# generated by datamodel-codegen:
#   filename:  auth_response.yaml
#   timestamp: 2024-06-01T22:41:26+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Flow(BaseModel):
    stages: List[str] = Field(
        ...,
        description="The login type of each of the stages required to complete this\nauthentication flow",
    )


class AuthenticationResponse(BaseModel):
    flows: List[Flow] = Field(
        ...,
        description="A list of the login flows supported by the server for this API.",
    )
    params: Optional[Dict[str, Dict[str, Any]]] = Field(
        None,
        description="Contains any information that the client will need to know in order to\nuse a given type of authentication. For each login type presented,\nthat type may be present as a key in this dictionary. For example, the\npublic part of an OAuth client ID could be given here.",
        examples=[{"example.type.baz": {"example_key": "foobar"}}],
    )
    session: Optional[str] = Field(
        None,
        description="This is a session identifier that the client must pass back to the home\nserver, if one is provided, in subsequent attempts to authenticate in the\nsame API call.",
        examples=["xxxxxxyz"],
    )
    completed: Optional[List[str]] = Field(
        None, description="A list of the stages the client has completed successfully"
    )
