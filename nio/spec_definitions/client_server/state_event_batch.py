# generated by datamodel-codegen:
#   filename:  state_event_batch.yaml
#   timestamp: 2024-06-01T22:41:42+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Unsigned(BaseModel):
    age: Optional[int] = Field(
        None,
        description="The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
        examples=[1567437],
    )
    redacted_because: Optional[Dict[str, Any]] = Field(
        None,
        description="The event that redacted this event, if any.",
        examples=[
            {
                "type": "m.room.redaction",
                "sender": "@moderator:example.org",
                "content": {"reason": "spam"},
                "redacts": "$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45",
                "event_id": "$Nhl3rsgHMjk-DjMJANawr9HHAhLg4GcoTYrSiYYGqEE",
                "origin_server_ts": 1632491098485,
                "unsigned": {"age": 1257},
            }
        ],
        title="ClientEventWithoutRoomID",
    )
    transaction_id: Optional[str] = Field(
        None,
        description="The client-supplied [transaction ID](/client-server-api/#transaction-identifiers), for example, provided via\n`PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}`,\nif the client being given the event is the same one which sent it.\n",
    )
    prev_content: Optional[Dict[str, Any]] = Field(
        None,
        description="The previous `content` for this event. This field is generated\nby the local homeserver, and is only returned if the event is a state event,\nand the client has permission to see the previous content.\n",
        title="EventContent",
    )


class ClientEventWithoutRoomId(BaseModel):
    event_id: str = Field(
        ...,
        description="The globally unique identifier for this event.",
        examples=["$26RqwJMLw-yds1GAH_QxjHRC1Da9oasK0e5VLnck_45"],
    )
    type: str = Field(
        ..., description="The type of the event.", examples=["m.room.member"]
    )
    state_key: Optional[str] = Field(
        None,
        description="Present if, and only if, this event is a *state* event. The key making\nthis piece of state unique in the room. Note that it is often an empty\nstring.\n\nState keys starting with an `@` are reserved for referencing user IDs, such\nas room members. With the exception of a few events, state events set with a\ngiven user's ID as the state key MUST only be set by that user.",
        examples=["@user:example.org"],
    )
    sender: str = Field(
        ...,
        description="Contains the fully-qualified ID of the user who sent this event.",
        examples=["@example:example.org"],
    )
    origin_server_ts: int = Field(
        ...,
        description="Timestamp (in milliseconds since the unix epoch) on originating homeserver\nwhen this event was sent.",
        examples=[1632489532305],
    )
    content: Dict[str, Any] = Field(
        ...,
        description="The body of this event, as created by the client which sent it.",
        examples=[{"membership": "join"}],
    )
    unsigned: Optional[Unsigned] = Field(
        None,
        description="Contains optional extra information about the event.",
        title="UnsignedData",
    )


class StateEventBatch(BaseModel):
    events: Optional[List[ClientEventWithoutRoomId]] = Field(
        None, description="List of events."
    )
