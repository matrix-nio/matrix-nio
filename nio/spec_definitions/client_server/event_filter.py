# generated by datamodel-codegen:
#   filename:  event_filter.yaml
#   timestamp: 2024-06-01T22:41:30+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class EventFilter(BaseModel):
    limit: Optional[int] = Field(
        None,
        description="The maximum number of events to return, must be an integer greater than 0.\n\nServers should apply a default value, and impose a maximum value to avoid\nresource exhaustion.\n",
    )
    not_senders: Optional[List[str]] = Field(
        None,
        description="A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
    )
    not_types: Optional[List[str]] = Field(
        None,
        description="A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
    )
    senders: Optional[List[str]] = Field(
        None,
        description="A list of senders IDs to include. If this list is absent then all senders are included.",
    )
    types: Optional[List[str]] = Field(
        None,
        description="A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
    )
