# generated by datamodel-codegen:
#   filename:  sync_filter.yaml
#   timestamp: 2024-06-01T22:41:43+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class EventFormat(Enum):
    client = "client"
    federation = "federation"


class EventFilter(BaseModel):
    limit: Optional[int] = Field(
        None,
        description="The maximum number of events to return, must be an integer greater than 0.\n\nServers should apply a default value, and impose a maximum value to avoid\nresource exhaustion.\n",
    )
    not_senders: Optional[List[str]] = Field(
        None,
        description="A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the `'senders'` filter.",
    )
    not_types: Optional[List[str]] = Field(
        None,
        description="A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the `'types'` filter. A '*' can be used as a wildcard to match any sequence of characters.",
    )
    senders: Optional[List[str]] = Field(
        None,
        description="A list of senders IDs to include. If this list is absent then all senders are included.",
    )
    types: Optional[List[str]] = Field(
        None,
        description="A list of event types to include. If this list is absent then all event types are included. A `'*'` can be used as a wildcard to match any sequence of characters.",
    )


class RoomEventFilter(EventFilter):
    unread_thread_notifications: Optional[bool] = Field(
        None,
        description="If `true`, enables per-[thread](/client-server-api/#threading) notification\ncounts. Only applies to the `/sync` endpoint. Defaults to `false`.",
    )
    lazy_load_members: Optional[bool] = Field(
        None,
        description="If `true`, enables lazy-loading of membership events. See\n[Lazy-loading room members](/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`.",
    )
    include_redundant_members: Optional[bool] = Field(
        None,
        description="If `true`, sends all membership events for all events, even if they have already\nbeen sent to the client. Does not\napply unless `lazy_load_members` is `true`. See\n[Lazy-loading room members](/client-server-api/#lazy-loading-room-members)\nfor more information. Defaults to `false`.",
    )
    not_rooms: Optional[List[str]] = Field(
        None,
        description="A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter.",
    )
    rooms: Optional[List[str]] = Field(
        None,
        description="A list of room IDs to include. If this list is absent then all rooms are included.",
    )
    contains_url: Optional[bool] = Field(
        None,
        description="If `true`, includes only events with a `url` key in their content. If `false`, excludes those events. If omitted, `url` key is not considered for filtering.",
    )


class Room(BaseModel):
    not_rooms: Optional[List[str]] = Field(
        None,
        description="A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the `'rooms'` filter. This filter is applied before the filters in `ephemeral`, `state`, `timeline` or `account_data`",
    )
    rooms: Optional[List[str]] = Field(
        None,
        description="A list of room IDs to include. If this list is absent then all rooms are included. This filter is applied before the filters in `ephemeral`, `state`, `timeline` or `account_data`",
    )
    ephemeral: Optional[RoomEventFilter] = Field(
        None,
        description="The ephemeral events to include for rooms. These are the events that appear in the `ephemeral` property in the `/sync` response.",
    )
    include_leave: Optional[bool] = Field(
        None,
        description="Include rooms that the user has left in the sync, default false",
    )
    state: Optional[RoomEventFilter] = Field(
        None, description="The state events to include for rooms.", title="StateFilter"
    )
    timeline: Optional[RoomEventFilter] = Field(
        None, description="The message and state update events to include for rooms."
    )
    account_data: Optional[RoomEventFilter] = Field(
        None, description="The per user account data to include for rooms."
    )


class Filter(BaseModel):
    event_fields: Optional[List[str]] = Field(
        None,
        description="List of event fields to include. If this list is absent then all fields are included. The entries are [dot-separated paths for each property](/appendices#dot-separated-property-paths) to include. So ['content.body'] will include the 'body' field of the 'content' object. A server may include more fields than were requested.",
    )
    event_format: Optional[EventFormat] = Field(
        None,
        description="The format to use for events. 'client' will return the events in a format suitable for clients. 'federation' will return the raw event as received over federation. The default is 'client'.",
    )
    presence: Optional[EventFilter] = Field(
        None, description="The presence updates to include."
    )
    account_data: Optional[EventFilter] = Field(
        None,
        description="The user account data that isn't associated with rooms to include.",
    )
    room: Optional[Room] = Field(
        None, description="Filters to be applied to room data.", title="RoomFilter"
    )
