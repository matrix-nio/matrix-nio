# generated by datamodel-codegen:
#   filename:  sso_login_flow.yaml
#   timestamp: 2024-06-01T22:41:41+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Type(Enum):
    m_login_sso = "m.login.sso"


class IdentityProvider(BaseModel):
    id: str = Field(
        ...,
        description="Opaque string chosen by the homeserver, uniquely identifying\nthe IdP from other IdPs the homeserver might support. Should\nuse the [Opaque identifier Grammar](/appendices#opaque-identifiers).",
        examples=["com.example.idp.github"],
    )
    name: str = Field(
        ...,
        description="Human readable description for the IdP, intended to be shown to\nthe user.",
        examples=["Github"],
    )
    icon: Optional[str] = Field(
        None,
        description="Optional `mxc://` URI to provide an image/icon representing the IdP.\nIntended to be shown alongside the `name` if provided.",
        examples=["mxc://example.org/abc123"],
    )
    brand: Optional[str] = Field(
        None,
        description="Optional UI hint for what kind of common SSO provider is being\ndescribed in this IdP. Matrix maintains a registry of identifiers\n[in the matrix-spec repo](https://github.com/matrix-org/matrix-spec/blob/main/informal/idp-brands.md)\nto ensure clients and servers are aligned on major/common brands.\n\nClients should prefer the `brand` over the `icon`, when both are\nprovided. Clients are not required to support any particular `brand`,\nincluding those in the registry, though are expected to be able to\npresent any IdP based off the `name`/`icon` to the user regardless.\n\nUnregistered brands are permitted using the [Common Namespaced Identifier Grammar](/appendices/#common-namespaced-identifier-grammar),\nthough excluding the namespace requirements. For example, `examplesso`\nis a valid brand which is not in the registry but still permitted.\nServers should be mindful that clients might not support their unregistered\nbrand usage as intended by the server.",
        examples=["github"],
    )


class MLoginSsoFlowSchema(BaseModel):
    type: Type = Field(
        ..., description="The string `m.login.sso`", examples=["m.login.sso"]
    )
    identity_providers: Optional[List[IdentityProvider]] = Field(
        None,
        description="Optional identity providers (IdPs) to present to the user. These would\nappear (typically) as distinct buttons for the user to interact with,\nand would map to the appropriate IdP-dependent redirect endpoint for that\nIdP.",
        examples=[
            [
                {"id": "com.example.idp.github", "name": "GitHub", "brand": "github"},
                {
                    "id": "com.example.idp.gitlab",
                    "name": "GitLab",
                    "icon": "mxc://example.com/abc123",
                },
            ]
        ],
    )
